ARM GAS  /tmp/ccAdJ5fj.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f1xx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NMI_Handler,"ax",%progbits
  18              		.align	1
  19              		.global	NMI_Handler
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	NMI_Handler:
  25              	.LFB65:
  26              		.file 1 "Core/Src/stm32f1xx_it.c"
   1:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f1xx_it.c **** /**
   3:Core/Src/stm32f1xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   5:Core/Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32f1xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32f1xx_it.c ****   * @attention
   8:Core/Src/stm32f1xx_it.c ****   *
   9:Core/Src/stm32f1xx_it.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/stm32f1xx_it.c ****   * All rights reserved.
  11:Core/Src/stm32f1xx_it.c ****   *
  12:Core/Src/stm32f1xx_it.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/stm32f1xx_it.c ****   * in the root directory of this software component.
  14:Core/Src/stm32f1xx_it.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/stm32f1xx_it.c ****   *
  16:Core/Src/stm32f1xx_it.c ****   ******************************************************************************
  17:Core/Src/stm32f1xx_it.c ****   */
  18:Core/Src/stm32f1xx_it.c **** /* USER CODE END Header */
  19:Core/Src/stm32f1xx_it.c **** 
  20:Core/Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/stm32f1xx_it.c **** #include "main.h"
  22:Core/Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  23:Core/Src/stm32f1xx_it.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/stm32f1xx_it.c **** /* USER CODE END Includes */
  26:Core/Src/stm32f1xx_it.c **** 
  27:Core/Src/stm32f1xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN TD */
  29:Core/Src/stm32f1xx_it.c **** 
  30:Core/Src/stm32f1xx_it.c **** /* USER CODE END TD */
  31:Core/Src/stm32f1xx_it.c **** 
  32:Core/Src/stm32f1xx_it.c **** /* Private define ------------------------------------------------------------*/
ARM GAS  /tmp/ccAdJ5fj.s 			page 2


  33:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PD */
  34:Core/Src/stm32f1xx_it.c **** 
  35:Core/Src/stm32f1xx_it.c **** /* USER CODE END PD */
  36:Core/Src/stm32f1xx_it.c **** 
  37:Core/Src/stm32f1xx_it.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PM */
  39:Core/Src/stm32f1xx_it.c **** 
  40:Core/Src/stm32f1xx_it.c **** /* USER CODE END PM */
  41:Core/Src/stm32f1xx_it.c **** 
  42:Core/Src/stm32f1xx_it.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PV */
  44:Core/Src/stm32f1xx_it.c **** 
  45:Core/Src/stm32f1xx_it.c **** /* USER CODE END PV */
  46:Core/Src/stm32f1xx_it.c **** 
  47:Core/Src/stm32f1xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  48:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PFP */
  49:Core/Src/stm32f1xx_it.c **** 
  50:Core/Src/stm32f1xx_it.c **** /* USER CODE END PFP */
  51:Core/Src/stm32f1xx_it.c **** 
  52:Core/Src/stm32f1xx_it.c **** /* Private user code ---------------------------------------------------------*/
  53:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  54:Core/Src/stm32f1xx_it.c **** 
  55:Core/Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  56:Core/Src/stm32f1xx_it.c **** 
  57:Core/Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  58:Core/Src/stm32f1xx_it.c **** extern UART_HandleTypeDef huart2;
  59:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN EV */
  60:Core/Src/stm32f1xx_it.c **** 
  61:Core/Src/stm32f1xx_it.c **** /* USER CODE END EV */
  62:Core/Src/stm32f1xx_it.c **** 
  63:Core/Src/stm32f1xx_it.c **** /******************************************************************************/
  64:Core/Src/stm32f1xx_it.c **** /*           Cortex-M3 Processor Interruption and Exception Handlers          */
  65:Core/Src/stm32f1xx_it.c **** /******************************************************************************/
  66:Core/Src/stm32f1xx_it.c **** /**
  67:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Non maskable interrupt.
  68:Core/Src/stm32f1xx_it.c ****   */
  69:Core/Src/stm32f1xx_it.c **** void NMI_Handler(void)
  70:Core/Src/stm32f1xx_it.c **** {
  27              		.loc 1 70 1
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  37              	.L2:
  71:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  72:Core/Src/stm32f1xx_it.c **** 
  73:Core/Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  74:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  75:Core/Src/stm32f1xx_it.c ****   while (1)
  38              		.loc 1 75 9 discriminator 1
  39 0004 FEE7     		b	.L2
  40              		.cfi_endproc
ARM GAS  /tmp/ccAdJ5fj.s 			page 3


  41              	.LFE65:
  43              		.section	.text.HardFault_Handler,"ax",%progbits
  44              		.align	1
  45              		.global	HardFault_Handler
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  50              	HardFault_Handler:
  51              	.LFB66:
  76:Core/Src/stm32f1xx_it.c ****   {
  77:Core/Src/stm32f1xx_it.c ****   }
  78:Core/Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  79:Core/Src/stm32f1xx_it.c **** }
  80:Core/Src/stm32f1xx_it.c **** 
  81:Core/Src/stm32f1xx_it.c **** /**
  82:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Hard fault interrupt.
  83:Core/Src/stm32f1xx_it.c ****   */
  84:Core/Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  85:Core/Src/stm32f1xx_it.c **** {
  52              		.loc 1 85 1
  53              		.cfi_startproc
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 1, uses_anonymous_args = 0
  56              		@ link register save eliminated.
  57 0000 80B4     		push	{r7}
  58              		.cfi_def_cfa_offset 4
  59              		.cfi_offset 7, -4
  60 0002 00AF     		add	r7, sp, #0
  61              		.cfi_def_cfa_register 7
  62              	.L4:
  86:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  87:Core/Src/stm32f1xx_it.c **** 
  88:Core/Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  89:Core/Src/stm32f1xx_it.c ****   while (1)
  63              		.loc 1 89 9 discriminator 1
  64 0004 FEE7     		b	.L4
  65              		.cfi_endproc
  66              	.LFE66:
  68              		.section	.text.MemManage_Handler,"ax",%progbits
  69              		.align	1
  70              		.global	MemManage_Handler
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  75              	MemManage_Handler:
  76              	.LFB67:
  90:Core/Src/stm32f1xx_it.c ****   {
  91:Core/Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  92:Core/Src/stm32f1xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  93:Core/Src/stm32f1xx_it.c ****   }
  94:Core/Src/stm32f1xx_it.c **** }
  95:Core/Src/stm32f1xx_it.c **** 
  96:Core/Src/stm32f1xx_it.c **** /**
  97:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Memory management fault.
  98:Core/Src/stm32f1xx_it.c ****   */
  99:Core/Src/stm32f1xx_it.c **** void MemManage_Handler(void)
 100:Core/Src/stm32f1xx_it.c **** {
ARM GAS  /tmp/ccAdJ5fj.s 			page 4


  77              		.loc 1 100 1
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 1, uses_anonymous_args = 0
  81              		@ link register save eliminated.
  82 0000 80B4     		push	{r7}
  83              		.cfi_def_cfa_offset 4
  84              		.cfi_offset 7, -4
  85 0002 00AF     		add	r7, sp, #0
  86              		.cfi_def_cfa_register 7
  87              	.L6:
 101:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 102:Core/Src/stm32f1xx_it.c **** 
 103:Core/Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 104:Core/Src/stm32f1xx_it.c ****   while (1)
  88              		.loc 1 104 9 discriminator 1
  89 0004 FEE7     		b	.L6
  90              		.cfi_endproc
  91              	.LFE67:
  93              		.section	.text.BusFault_Handler,"ax",%progbits
  94              		.align	1
  95              		.global	BusFault_Handler
  96              		.syntax unified
  97              		.thumb
  98              		.thumb_func
 100              	BusFault_Handler:
 101              	.LFB68:
 105:Core/Src/stm32f1xx_it.c ****   {
 106:Core/Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 107:Core/Src/stm32f1xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 108:Core/Src/stm32f1xx_it.c ****   }
 109:Core/Src/stm32f1xx_it.c **** }
 110:Core/Src/stm32f1xx_it.c **** 
 111:Core/Src/stm32f1xx_it.c **** /**
 112:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 113:Core/Src/stm32f1xx_it.c ****   */
 114:Core/Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 115:Core/Src/stm32f1xx_it.c **** {
 102              		.loc 1 115 1
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 1, uses_anonymous_args = 0
 106              		@ link register save eliminated.
 107 0000 80B4     		push	{r7}
 108              		.cfi_def_cfa_offset 4
 109              		.cfi_offset 7, -4
 110 0002 00AF     		add	r7, sp, #0
 111              		.cfi_def_cfa_register 7
 112              	.L8:
 116:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 117:Core/Src/stm32f1xx_it.c **** 
 118:Core/Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 119:Core/Src/stm32f1xx_it.c ****   while (1)
 113              		.loc 1 119 9 discriminator 1
 114 0004 FEE7     		b	.L8
 115              		.cfi_endproc
 116              	.LFE68:
ARM GAS  /tmp/ccAdJ5fj.s 			page 5


 118              		.section	.text.UsageFault_Handler,"ax",%progbits
 119              		.align	1
 120              		.global	UsageFault_Handler
 121              		.syntax unified
 122              		.thumb
 123              		.thumb_func
 125              	UsageFault_Handler:
 126              	.LFB69:
 120:Core/Src/stm32f1xx_it.c ****   {
 121:Core/Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 122:Core/Src/stm32f1xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 123:Core/Src/stm32f1xx_it.c ****   }
 124:Core/Src/stm32f1xx_it.c **** }
 125:Core/Src/stm32f1xx_it.c **** 
 126:Core/Src/stm32f1xx_it.c **** /**
 127:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 128:Core/Src/stm32f1xx_it.c ****   */
 129:Core/Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 130:Core/Src/stm32f1xx_it.c **** {
 127              		.loc 1 130 1
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 1, uses_anonymous_args = 0
 131              		@ link register save eliminated.
 132 0000 80B4     		push	{r7}
 133              		.cfi_def_cfa_offset 4
 134              		.cfi_offset 7, -4
 135 0002 00AF     		add	r7, sp, #0
 136              		.cfi_def_cfa_register 7
 137              	.L10:
 131:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 132:Core/Src/stm32f1xx_it.c **** 
 133:Core/Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 134:Core/Src/stm32f1xx_it.c ****   while (1)
 138              		.loc 1 134 9 discriminator 1
 139 0004 FEE7     		b	.L10
 140              		.cfi_endproc
 141              	.LFE69:
 143              		.section	.text.SVC_Handler,"ax",%progbits
 144              		.align	1
 145              		.global	SVC_Handler
 146              		.syntax unified
 147              		.thumb
 148              		.thumb_func
 150              	SVC_Handler:
 151              	.LFB70:
 135:Core/Src/stm32f1xx_it.c ****   {
 136:Core/Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 137:Core/Src/stm32f1xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 138:Core/Src/stm32f1xx_it.c ****   }
 139:Core/Src/stm32f1xx_it.c **** }
 140:Core/Src/stm32f1xx_it.c **** 
 141:Core/Src/stm32f1xx_it.c **** /**
 142:Core/Src/stm32f1xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 143:Core/Src/stm32f1xx_it.c ****   */
 144:Core/Src/stm32f1xx_it.c **** void SVC_Handler(void)
 145:Core/Src/stm32f1xx_it.c **** {
ARM GAS  /tmp/ccAdJ5fj.s 			page 6


 152              		.loc 1 145 1
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 1, uses_anonymous_args = 0
 156              		@ link register save eliminated.
 157 0000 80B4     		push	{r7}
 158              		.cfi_def_cfa_offset 4
 159              		.cfi_offset 7, -4
 160 0002 00AF     		add	r7, sp, #0
 161              		.cfi_def_cfa_register 7
 146:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 147:Core/Src/stm32f1xx_it.c **** 
 148:Core/Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 149:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 150:Core/Src/stm32f1xx_it.c **** 
 151:Core/Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 152:Core/Src/stm32f1xx_it.c **** }
 162              		.loc 1 152 1
 163 0004 00BF     		nop
 164 0006 BD46     		mov	sp, r7
 165              		.cfi_def_cfa_register 13
 166              		@ sp needed
 167 0008 80BC     		pop	{r7}
 168              		.cfi_restore 7
 169              		.cfi_def_cfa_offset 0
 170 000a 7047     		bx	lr
 171              		.cfi_endproc
 172              	.LFE70:
 174              		.section	.text.DebugMon_Handler,"ax",%progbits
 175              		.align	1
 176              		.global	DebugMon_Handler
 177              		.syntax unified
 178              		.thumb
 179              		.thumb_func
 181              	DebugMon_Handler:
 182              	.LFB71:
 153:Core/Src/stm32f1xx_it.c **** 
 154:Core/Src/stm32f1xx_it.c **** /**
 155:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Debug monitor.
 156:Core/Src/stm32f1xx_it.c ****   */
 157:Core/Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 158:Core/Src/stm32f1xx_it.c **** {
 183              		.loc 1 158 1
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 0
 186              		@ frame_needed = 1, uses_anonymous_args = 0
 187              		@ link register save eliminated.
 188 0000 80B4     		push	{r7}
 189              		.cfi_def_cfa_offset 4
 190              		.cfi_offset 7, -4
 191 0002 00AF     		add	r7, sp, #0
 192              		.cfi_def_cfa_register 7
 159:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 160:Core/Src/stm32f1xx_it.c **** 
 161:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 162:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 163:Core/Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/ccAdJ5fj.s 			page 7


 164:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 165:Core/Src/stm32f1xx_it.c **** }
 193              		.loc 1 165 1
 194 0004 00BF     		nop
 195 0006 BD46     		mov	sp, r7
 196              		.cfi_def_cfa_register 13
 197              		@ sp needed
 198 0008 80BC     		pop	{r7}
 199              		.cfi_restore 7
 200              		.cfi_def_cfa_offset 0
 201 000a 7047     		bx	lr
 202              		.cfi_endproc
 203              	.LFE71:
 205              		.section	.text.PendSV_Handler,"ax",%progbits
 206              		.align	1
 207              		.global	PendSV_Handler
 208              		.syntax unified
 209              		.thumb
 210              		.thumb_func
 212              	PendSV_Handler:
 213              	.LFB72:
 166:Core/Src/stm32f1xx_it.c **** 
 167:Core/Src/stm32f1xx_it.c **** /**
 168:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Pendable request for system service.
 169:Core/Src/stm32f1xx_it.c ****   */
 170:Core/Src/stm32f1xx_it.c **** void PendSV_Handler(void)
 171:Core/Src/stm32f1xx_it.c **** {
 214              		.loc 1 171 1
 215              		.cfi_startproc
 216              		@ args = 0, pretend = 0, frame = 0
 217              		@ frame_needed = 1, uses_anonymous_args = 0
 218              		@ link register save eliminated.
 219 0000 80B4     		push	{r7}
 220              		.cfi_def_cfa_offset 4
 221              		.cfi_offset 7, -4
 222 0002 00AF     		add	r7, sp, #0
 223              		.cfi_def_cfa_register 7
 172:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 173:Core/Src/stm32f1xx_it.c **** 
 174:Core/Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 175:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 176:Core/Src/stm32f1xx_it.c **** 
 177:Core/Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 178:Core/Src/stm32f1xx_it.c **** }
 224              		.loc 1 178 1
 225 0004 00BF     		nop
 226 0006 BD46     		mov	sp, r7
 227              		.cfi_def_cfa_register 13
 228              		@ sp needed
 229 0008 80BC     		pop	{r7}
 230              		.cfi_restore 7
 231              		.cfi_def_cfa_offset 0
 232 000a 7047     		bx	lr
 233              		.cfi_endproc
 234              	.LFE72:
 236              		.section	.text.SysTick_Handler,"ax",%progbits
 237              		.align	1
ARM GAS  /tmp/ccAdJ5fj.s 			page 8


 238              		.global	SysTick_Handler
 239              		.syntax unified
 240              		.thumb
 241              		.thumb_func
 243              	SysTick_Handler:
 244              	.LFB73:
 179:Core/Src/stm32f1xx_it.c **** 
 180:Core/Src/stm32f1xx_it.c **** /**
 181:Core/Src/stm32f1xx_it.c ****   * @brief This function handles System tick timer.
 182:Core/Src/stm32f1xx_it.c ****   */
 183:Core/Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 184:Core/Src/stm32f1xx_it.c **** {
 245              		.loc 1 184 1
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 0
 248              		@ frame_needed = 1, uses_anonymous_args = 0
 249 0000 80B5     		push	{r7, lr}
 250              		.cfi_def_cfa_offset 8
 251              		.cfi_offset 7, -8
 252              		.cfi_offset 14, -4
 253 0002 00AF     		add	r7, sp, #0
 254              		.cfi_def_cfa_register 7
 185:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 186:Core/Src/stm32f1xx_it.c **** 
 187:Core/Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 188:Core/Src/stm32f1xx_it.c ****   HAL_IncTick();
 255              		.loc 1 188 3
 256 0004 FFF7FEFF 		bl	HAL_IncTick
 189:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 190:Core/Src/stm32f1xx_it.c **** 
 191:Core/Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 192:Core/Src/stm32f1xx_it.c **** }
 257              		.loc 1 192 1
 258 0008 00BF     		nop
 259 000a 80BD     		pop	{r7, pc}
 260              		.cfi_endproc
 261              	.LFE73:
 263              		.section	.text.USART2_IRQHandler,"ax",%progbits
 264              		.align	1
 265              		.global	USART2_IRQHandler
 266              		.syntax unified
 267              		.thumb
 268              		.thumb_func
 270              	USART2_IRQHandler:
 271              	.LFB74:
 193:Core/Src/stm32f1xx_it.c **** 
 194:Core/Src/stm32f1xx_it.c **** /******************************************************************************/
 195:Core/Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 196:Core/Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 197:Core/Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 198:Core/Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 199:Core/Src/stm32f1xx_it.c **** /******************************************************************************/
 200:Core/Src/stm32f1xx_it.c **** 
 201:Core/Src/stm32f1xx_it.c **** /**
 202:Core/Src/stm32f1xx_it.c ****   * @brief This function handles USART2 global interrupt.
 203:Core/Src/stm32f1xx_it.c ****   */
 204:Core/Src/stm32f1xx_it.c **** void USART2_IRQHandler(void)
ARM GAS  /tmp/ccAdJ5fj.s 			page 9


 205:Core/Src/stm32f1xx_it.c **** {
 272              		.loc 1 205 1
 273              		.cfi_startproc
 274              		@ args = 0, pretend = 0, frame = 0
 275              		@ frame_needed = 1, uses_anonymous_args = 0
 276 0000 80B5     		push	{r7, lr}
 277              		.cfi_def_cfa_offset 8
 278              		.cfi_offset 7, -8
 279              		.cfi_offset 14, -4
 280 0002 00AF     		add	r7, sp, #0
 281              		.cfi_def_cfa_register 7
 206:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 0 */
 207:Core/Src/stm32f1xx_it.c **** 
 208:Core/Src/stm32f1xx_it.c ****   /* USER CODE END USART2_IRQn 0 */
 209:Core/Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&huart2);
 282              		.loc 1 209 3
 283 0004 0248     		ldr	r0, .L16
 284 0006 FFF7FEFF 		bl	HAL_UART_IRQHandler
 210:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 1 */
 211:Core/Src/stm32f1xx_it.c **** 
 212:Core/Src/stm32f1xx_it.c ****   /* USER CODE END USART2_IRQn 1 */
 213:Core/Src/stm32f1xx_it.c **** }
 285              		.loc 1 213 1
 286 000a 00BF     		nop
 287 000c 80BD     		pop	{r7, pc}
 288              	.L17:
 289 000e 00BF     		.align	2
 290              	.L16:
 291 0010 00000000 		.word	huart2
 292              		.cfi_endproc
 293              	.LFE74:
 295              		.text
 296              	.Letext0:
 297              		.file 2 "/opt/st/stm32cubeide_1.10.1/plugins/com.st.stm32cube.ide.mcu.externaltools.gnu-tools-for-
 298              		.file 3 "/opt/st/stm32cubeide_1.10.1/plugins/com.st.stm32cube.ide.mcu.externaltools.gnu-tools-for-
 299              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 300              		.file 5 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 301              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 302              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 303              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccAdJ5fj.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
     /tmp/ccAdJ5fj.s:18     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccAdJ5fj.s:24     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccAdJ5fj.s:44     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccAdJ5fj.s:50     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccAdJ5fj.s:69     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccAdJ5fj.s:75     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccAdJ5fj.s:94     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccAdJ5fj.s:100    .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccAdJ5fj.s:119    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccAdJ5fj.s:125    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccAdJ5fj.s:144    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccAdJ5fj.s:150    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccAdJ5fj.s:175    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccAdJ5fj.s:181    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccAdJ5fj.s:206    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccAdJ5fj.s:212    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccAdJ5fj.s:237    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccAdJ5fj.s:243    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccAdJ5fj.s:264    .text.USART2_IRQHandler:0000000000000000 $t
     /tmp/ccAdJ5fj.s:270    .text.USART2_IRQHandler:0000000000000000 USART2_IRQHandler
     /tmp/ccAdJ5fj.s:291    .text.USART2_IRQHandler:0000000000000010 $d
                           .group:0000000000000000 wm4.0.06d673f17b3774aa7c18073a6cbf2f9a
                           .group:0000000000000000 wm4.stm32f1xx_hal_conf.h.22.e8a44c2127afc730ae3c2427a61800bf
                           .group:0000000000000000 wm4.stm32f1xx.h.39.208bb8a61c892b7c37d899c49a031330
                           .group:0000000000000000 wm4.stm32f103xe.h.38.4f78f3a072dc4f9355fc3df8c7b1beeb
                           .group:0000000000000000 wm4._newlib_version.h.4.bfdf54b0af045d4a71376ae00f63a22c
                           .group:0000000000000000 wm4.features.h.33.318b64d71e0957639cfb30f1db1f7ec8
                           .group:0000000000000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:0000000000000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:0000000000000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:0000000000000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:0000000000000000 wm4.cmsis_version.h.32.4d5822004c01a829a975260e854b5f8e
                           .group:0000000000000000 wm4.core_cm3.h.66.fc46cac19810db8f98d67da7ef88f42c
                           .group:0000000000000000 wm4.cmsis_gcc.h.26.4f5798e999d5690b80e6ded3ecc94b37
                           .group:0000000000000000 wm4.core_cm3.h.127.f4474120f1a7524deb56f9d74ff175da
                           .group:0000000000000000 wm4.stm32f103xe.h.725.9a96d0161f2d027636715e1ecf40f574
                           .group:0000000000000000 wm4.stm32f1xx.h.162.96b09079a093c34dbd7f0b85cbd0ddee
                           .group:0000000000000000 wm4.stm32_hal_legacy.h.23.91ba5b544a4c2be2620a1e7ff0049e10
                           .group:0000000000000000 wm4.stddef.h.39.144cf5ddcd53cbfdac30259dc1a6c87f
                           .group:0000000000000000 wm4.stm32f1xx_hal_def.h.57.18d01ce1aa74e9fb44dbf16f821a574a
                           .group:0000000000000000 wm4.stm32f1xx_hal_rcc.h.95.21591bbc513aaa813c0b8640c3b32517
                           .group:0000000000000000 wm4.stm32f1xx_hal_rcc_ex.h.22.66c7d13818747b107e10421a4fd8120c
                           .group:0000000000000000 wm4.stm32f1xx_hal_rcc.h.1202.f8e5f9e0cf4eef7840facf5396029056
                           .group:0000000000000000 wm4.stm32f1xx_hal_gpio.h.22.fa638d688dcc57ca806fe6a7831b0d04
                           .group:0000000000000000 wm4.stm32f1xx_hal_gpio_ex.h.22.e3c24d30e9ab98ab5b1c7af6d8871c08
                           .group:0000000000000000 wm4.stm32f1xx_hal_gpio.h.263.f5ebf2f545ade59412ab9261c8e35dc4
                           .group:0000000000000000 wm4.stm32f1xx_hal_exti.h.22.29f568b08faa2fc4cf934d8ccc8e2874
                           .group:0000000000000000 wm4.stm32f1xx_hal_dma.h.22.3c14338534886827bf3aeaa2a7f412a1
                           .group:0000000000000000 wm4.stm32f1xx_hal_dma_ex.h.22.438e1362150b97592782187e6bf5da53
                           .group:0000000000000000 wm4.stm32f1xx_hal_dma.h.409.cafcd2cfe701091535636be537c18293
                           .group:0000000000000000 wm4.stm32f1xx_hal_cortex.h.22.b5f4174bb6a50d95405567b8f50e0900
                           .group:0000000000000000 wm4.stm32f1xx_hal_flash.h.22.5cea9a7210e6315b41724b47b5fdf203
                           .group:0000000000000000 wm4.stm32f1xx_hal_flash_ex.h.22.af08998ffc014feb1391660ffb6139fe
                           .group:0000000000000000 wm4.stm32f1xx_hal_pwr.h.22.3438c476faafc3240bf146f143df3fcd
                           .group:0000000000000000 wm4.stm32f1xx_hal_uart.h.22.5f7992e497faa36aa98f09f7214f4dbb
ARM GAS  /tmp/ccAdJ5fj.s 			page 11


                           .group:0000000000000000 wm4.stm32f1xx_hal.h.88.ae5c4f2e83348980a1011c2a2ef54956

UNDEFINED SYMBOLS
HAL_IncTick
HAL_UART_IRQHandler
huart2
